<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Software on Petros Papapanagiotou</title><link>https://www.petrospap.com/software/</link><description>Recent content in Software on Petros Papapanagiotou</description><generator>Hugo -- gohugo.io</generator><language>en-gb</language><copyright>© Petros Papapanagiotou</copyright><lastBuildDate>Thu, 11 Aug 2022 02:37:14 +0100</lastBuildDate><atom:link href="https://www.petrospap.com/software/index.xml" rel="self" type="application/rss+xml"/><item><title>WorkflowFM Reasoner</title><link>https://www.petrospap.com/software/reasoner/</link><pubDate>Thu, 11 Aug 2022 02:37:15 +0100</pubDate><guid>https://www.petrospap.com/software/reasoner/</guid><description>The WorkflowFM Reasoner is a logic-based library for correct-by-construction process modelling and composition.
It is available under the Apache 2.0 License on GitHub: https://github.com/workflowfm/workflowfm-reasoner
Website and documentation is available here: http://docs.workflowfm.com/workflowfm-reasoner/
About It is implemented as a logic-based library for the interactive theorem prover HOL Light that allows for rigorous, formally verified process specification and composition. The resulting workflows are correct-by-construction with the following verified properties:
Systematic resource accounting: No resources appear out of nowhere or disappear into thin air.</description></item><item><title>PEW</title><link>https://www.petrospap.com/software/pew/</link><pubDate>Thu, 11 Aug 2022 02:37:16 +0100</pubDate><guid>https://www.petrospap.com/software/pew/</guid><description>PEW is a persistent execution engine for π-calculus workflows generated by the WorkflowFM process composition tools, written in Scala. It is part of our WorkflowFM framework for formal workflow modelling and management.
It is available under the Apache 2.0 License on GitHub: https://github.com/workflowfm/pew
Website and documentation is available here: http://docs.workflowfm.com/pew/</description></item><item><title>Proter</title><link>https://www.petrospap.com/software/proter/</link><pubDate>Thu, 11 Aug 2022 02:37:17 +0100</pubDate><guid>https://www.petrospap.com/software/proter/</guid><description>Proter is an open-source discrete event simulation library for workflows, written in Scala. It is part of our WorkflowFM framework for formal workflow modelling and management.
It is available under the Apache 2.0 License on GitHub: https://github.com/workflowfm/proter
Website and documentation is available here: http://docs.workflowfm.com/proter/
Proter was initially developed for the simulation of logic-based workflows in WorkflowFM in the context of the DigiFlow project. It was then gradually separated into an independent project for general purpose process simulation.</description></item><item><title>WorkflowFM Composer</title><link>https://www.petrospap.com/software/composer/</link><pubDate>Sun, 04 Sep 2022 01:26:03 +0300</pubDate><guid>https://www.petrospap.com/software/composer/</guid><description>The WorkflowFM Composer is a a diagrammatic tool for formally verified process modelling and composition.
It is available under the Apache 2.0 License on GitHub: https://github.com/workflowfm/workflowfm-composer
Website and documentation is available here: http://docs.workflowfm.com/workflowfm-composer/
About The WorkflowFM Composer consists of a Java-based server and GUI for formally verified process composition using the WorkflowFM Reasoner. It provides a visual, diagrammatic interface to specify processes based on their input and output resources, and compose them together to form more complex workflows.</description></item><item><title>HOL Light Embed</title><link>https://www.petrospap.com/software/embedded-logics/</link><pubDate>Thu, 11 Aug 2022 02:37:18 +0100</pubDate><guid>https://www.petrospap.com/software/embedded-logics/</guid><description>I have developed a generic framework to perform object level reasoning with embedded logics in HOL Light. It provides procedural tactics inspired by Isabelle&amp;rsquo;s rule/erule/drule/frule. It also supports correspondences with computational terms in the style of Curry-Howard.
It is available under the BSD-3-Clause License on GitHub: https://github.com/PetrosPapapa/hol-light-embed
Additional information is available in this publication.
A step-by-step tutorial with a detailed example is available here.
What this library does Assuming you have an inductively defined logic encoded in HOL, the library allows you to prove object level theorems within your embedded logic.</description></item><item><title>Isabelle Light</title><link>https://www.petrospap.com/software/isabelle-light/</link><pubDate>Thu, 11 Aug 2022 02:37:19 +0100</pubDate><guid>https://www.petrospap.com/software/isabelle-light/</guid><description>HOL Light is a modern theorem proving system characterised by its powerful, low level interface that allows for flexibility and programmability. However, considerable effort is required to become accustomed to the system and to reach a point where one can comfortably achieve simple natural deduction proofs.
Isabelle is another powerful and widely used theorem prover that provides useful features for natural deduction proofs, including its meta-logic and its four main natural deduction tactics.</description></item><item><title>Boyer-Moore</title><link>https://www.petrospap.com/software/boyer-moore/</link><pubDate>Thu, 11 Aug 2022 02:37:20 +0100</pubDate><guid>https://www.petrospap.com/software/boyer-moore/</guid><description>In this project, we investigate the potential of the Boyer-Moore waterfall model for the automation of inductive proofs within a modern proof assistant. Based on the concepts and methodology underlying this 40-year-old model, we have implemented a new, fully integrated tool in the theorem prover HOL Light that can be invoked as a tactic.
We have also included several extensions and enhancements to the model. These include the integration of existing HOL Light proof procedures and the addition of state-of-the-art generalization techniques into the waterfall.</description></item><item><title>HOL Light Tools</title><link>https://www.petrospap.com/software/hol-light-tools/</link><pubDate>Thu, 11 Aug 2022 02:37:21 +0100</pubDate><guid>https://www.petrospap.com/software/hol-light-tools/</guid><description>This is a library of tools, tactics, and theories I have developed in HOL Light.
Some of these, such as the finite map theory, have been ported from the work of others, particularly in HOL4.
Notable things included:
A port of the finite map theory from HOL4. A set of tools to enable proofs in an arbitrarily extended proof state. A small library about substitution. Additional definitions and lemmas for lists, sets, multisets, etc.</description></item></channel></rss>